/*
 *  MIT License
 *
 *  Copyright (c) 2018 Harrison Pielke-Lombardo
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

package edu.ucdenver.ccp.knowtator.view.menu;

import edu.ucdenver.ccp.knowtator.view.KnowtatorView;

import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.Objects;
import java.util.Optional;

public class OpenPane extends MenuPane {

	private final JDialog parent;
	private final KnowtatorView view;
	private JPanel panel1;
	private JPanel contentPane;

	OpenPane(JDialog parent, KnowtatorView view) {
		super("Open");

		this.parent = parent;
		this.view = view;
	}


	@Override
	public void show() {
		String lastProjectFileName = KnowtatorView.PREFERENCES.get("Last Project", null);

		JFileChooser fileChooser = new JFileChooser();
		if (lastProjectFileName != null) {
			File lastProjectFile = new File(lastProjectFileName);
			if (lastProjectFile.exists()) {
				fileChooser.setCurrentDirectory(lastProjectFile);
				Optional<File> f = Arrays.stream(Objects.requireNonNull(lastProjectFile.listFiles())).filter(file -> file.getName().endsWith(".knowtator")).findAny();
				f.ifPresent(fileChooser::setSelectedFile);
			}
		}
		FileFilter fileFilter = new FileNameExtensionFilter("Knowtator", "knowtator");
		fileChooser.setFileFilter(fileFilter);
		fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

		contentPane.add(fileChooser, BorderLayout.CENTER);
		fileChooser.addActionListener(e -> {
			if (e.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) {
				File file = fileChooser.getSelectedFile();
				try {
					view.loadProject(file.getParentFile());
					parent.dispose();
				} catch (IOException e1) {
					e1.printStackTrace();
				}

			}
		});
	}

	@Override
	public JPanel getContentPane() {
		return contentPane;
	}

	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		panel1 = new JPanel();
		panel1.setLayout(new BorderLayout(0, 0));
		contentPane = new JPanel();
		contentPane.setLayout(new BorderLayout(0, 0));
		panel1.add(contentPane, BorderLayout.CENTER);
	}

	/**
	 *
	 */
	public JComponent $$$getRootComponent$$$() {
		return panel1;
	}
}
